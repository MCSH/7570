#
#  Panoramix v4 Oct 2019 
#  Decompiled source of 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038
# 
#  Let's make the world open source 
# 

def _fallback() payable: # default function
  revert

def unknown9f887fde(addr _param1, addr _param2): # not payable
  require calldata.size - 4 >= 64
  require ext_code.size(_param1)
  call _param1.0xdc4d20fa with:
       gas gas_remaining wei
      args _param2
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownb50a5869(addr _param1, addr _param2): # not payable
  require calldata.size - 4 >= 64
  require ext_code.size(_param1)
  call _param1.0xa3b22fc4 with:
       gas gas_remaining wei
      args _param2
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown1d10f231(addr _param1, uint256 _param2, addr _param3): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.0xfcafcc68 with:
       gas gas_remaining wei
      args _param2, _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown4592aca7(addr _param1, uint256 _param2, addr _param3): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.0x1b0dbf72 with:
       gas gas_remaining wei
      args _param2, _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown7bc3bd53(addr _param1, uint256 _param2, uint256 _param3): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.0xe50322a2 with:
       gas gas_remaining wei
      args _param2, _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownfba7591d(addr _param1): # not payable
  require calldata.size - 4 >= 32
  require ext_code.size(_param1)
  call _param1.0x1060930d with:
       gas gas_remaining wei
      args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  return ext_call.return_data[12 len 20]

def unknown5f6ef447(addr _param1, addr _param2, uint256 _param3): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.0xb68f4004 with:
       gas gas_remaining wei
      args addr(_param2), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknowneb0b9a85(addr _param1, addr _param2, uint256 _param3): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.0x7e348b7d with:
       gas gas_remaining wei
      args addr(_param2), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown96e8d72c(addr _param1, uint256 _param2, uint256 _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  call _param1.0x45e6bdcd with:
       gas gas_remaining wei
      args _param2, _param3, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown6aa3ee11(addr _param1, uint256 _param2, addr _param3): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.0x6090dec5 with:
       gas gas_remaining wei
      args _param2, _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  return ext_call.return_data[0]

def unknownba727a95(addr _param1, uint256 _param2, addr _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  call _param1.0xb63fb62 with:
       gas gas_remaining wei
      args _param2, addr(_param3), _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown1558b048(addr _param1, uint256 _param2, addr _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  call _param1.0x9bb8f838 with:
       gas gas_remaining wei
      args _param2, addr(_param3), _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown25cf37d0(addr _param1, uint256 _param2, addr _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  call _param1.0xf9f30db6 with:
       gas gas_remaining wei
      args _param2, addr(_param3), _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def transfer(address _tokenAddress, address _to, uint256 _amount): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_tokenAddress)
  call _tokenAddress.transfer(address to, uint256 value) with:
       gas gas_remaining wei
      args addr(_to), _amount
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown08f00e34(addr _param1, addr _param2, uint256 _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  call _param1.0x9bb8f838 with:
       gas gas_remaining wei
      args _param3, addr(this.address), _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xef693bed with:
       gas gas_remaining wei
      args this.address, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).withdraw(uint256 amount) with:
       gas gas_remaining wei
      args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  call caller with:
     value _param4 wei
       gas 2300 * is_zero(value) wei

def unknown42dd11bb(addr _param1, addr _param2, uint256 _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param2)
  call _param2.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(_param1)
      call _param1.0x9bb8f838 with:
           gas gas_remaining wei
          args _param3, addr(this.address), 0
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param4 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param4:
          revert with 0, 'mul-overflow'
      require ext_code.size(_param1)
      call _param1.0x9bb8f838 with:
           gas gas_remaining wei
          args _param3, addr(this.address), _param4 * 10^(-ext_call.return_data[0] + 18)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xef693bed with:
       gas gas_remaining wei
      args caller, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknowna033df12(addr _param1, addr _param2) payable: 
  require calldata.size - 4 >= 64
  require ext_code.size(_param1)
  call _param1.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).deposit() with:
     value call.value wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param1), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x3b4da69f with:
       gas gas_remaining wei
      args addr(_param2), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown7b5a3b43(addr _param1, addr _param2, uint256 _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  if _param4 <â€² 0:
      revert with 0, 'int-overflow'
  require ext_code.size(_param1)
  call _param1.0x45e6bdcd with:
       gas gas_remaining wei
      args _param3, -_param4, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x9bb8f838 with:
       gas gas_remaining wei
      args _param3, addr(this.address), _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xef693bed with:
       gas gas_remaining wei
      args this.address, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).withdraw(uint256 amount) with:
       gas gas_remaining wei
      args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  call caller with:
     value _param4 wei
       gas 2300 * is_zero(value) wei

def unknownc56167c6(addr _param1, addr _param2, uint256 _param3): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
       gas gas_remaining wei
      args caller, this.address, _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param1), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x3b4da69f with:
       gas gas_remaining wei
      args addr(_param2), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown7df2eb25(addr _param1, addr _param2, uint256 _param3, bool _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  if _param4:
      call _param1.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param3
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param1), _param3
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  call _param1.0x3b4da69f with:
       gas gas_remaining wei
      args addr(_param2), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown493c2049(addr _param1, addr _param2, uint256 _param3, addr _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  static call _param1.proxies(address param1) with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[12 len 20]:
      if ext_code.size(_param4):
          revert with 0, 'Dst-is-a-contract'
      require ext_code.size(_param1)
      call _param1.build(address owner) with:
           gas gas_remaining wei
          args _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
  else:
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).owner() with:
              gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if ext_call.return_data_param4:
          if ext_code.size(_param4):
              revert with 0, 'Dst-is-a-contract'
          require ext_code.size(_param1)
          call _param1.build(address owner) with:
               gas gas_remaining wei
              args _param4
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
  require ext_code.size(_param2)
  call _param2.0xfcafcc68 with:
       gas gas_remaining wei
      args _param3, addr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown6ab6a491(addr _param1, addr _param2, uint256 _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param2)
  call _param2.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param3, 0, 0
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.0x9bb8f838 with:
           gas gas_remaining wei
          args _param3, addr(this.address), 0
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param4 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param4:
          revert with 0, 'mul-overflow'
      if _param4 * 10^(-ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param3, -1 * _param4 * 10^(-ext_call.return_data[0] + 18), 0
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.0x9bb8f838 with:
           gas gas_remaining wei
          args _param3, addr(this.address), _param4 * 10^(-ext_call.return_data[0] + 18)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xef693bed with:
       gas gas_remaining wei
      args caller, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknowne205c108(addr _param1, addr _param2, uint256 _param3) payable: 
  require calldata.size - 4 >= 96
  require ext_code.size(_param2)
  call _param2.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).deposit() with:
     value call.value wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param2), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0x3b4da69f with:
       gas gas_remaining wei
      args addr(this.address), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if call.value <â€² 0:
      revert with 0, 'int-overflow'
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).0x76088703 with:
       gas gas_remaining wei
      args 0, ext_call.return_dataaddr(ext_call.return_data), addr(this.address), this.address, call.value, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownee284576(addr _param1, addr _param2, uint256 _param3, addr _param4) payable: 
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  static call _param1.0x8161b120 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data_param4:
      revert with 0, 'owner-missmatch'
  require ext_code.size(_param2)
  call _param2.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).deposit() with:
     value call.value wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param2), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0x3b4da69f with:
       gas gas_remaining wei
      args addr(this.address), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if call.value <â€² 0:
      revert with 0, 'int-overflow'
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).0x76088703 with:
       gas gas_remaining wei
      args 0, ext_call.return_dataaddr(ext_call.return_data), addr(this.address), this.address, call.value, 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown3e29e565(addr _param1, addr _param2, uint256 _param3, uint256 _param4, bool _param5): # not payable
  require calldata.size - 4 >= 160
  require ext_code.size(_param2)
  if _param5:
      call _param2.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      call _param2.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param2), _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  call _param2.0x3b4da69f with:
       gas gas_remaining wei
      args addr(this.address), _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param2)
  call _param2.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0x76088703 with:
           gas gas_remaining wei
          args 0, ext_call.return_dataaddr(ext_call.return_data), addr(this.address), this.address, 0, 0
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param4 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param4:
          revert with 0, 'mul-overflow'
      if _param4 * 10^(-ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0x76088703 with:
           gas gas_remaining wei
          args 0, ext_call.return_dataaddr(ext_call.return_data), addr(this.address), this.address, _param4 * 10^(-ext_call.return_data[0] + 18), 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownead64729(addr _param1, addr _param2, uint256 _param3, uint256 _param4, bool _param5, addr _param6): # not payable
  require calldata.size - 4 >= 192
  require ext_code.size(_param1)
  static call _param1.0x8161b120 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data_param6:
      revert with 0, 'owner-missmatch'
  require ext_code.size(_param2)
  if _param5:
      call _param2.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      call _param2.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param2), _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  call _param2.0x3b4da69f with:
       gas gas_remaining wei
      args addr(this.address), _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param2)
  call _param2.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0x76088703 with:
           gas gas_remaining wei
          args 0, ext_call.return_dataaddr(ext_call.return_data), addr(this.address), this.address, 0, 0
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param4 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param4:
          revert with 0, 'mul-overflow'
      if _param4 * 10^(-ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0x76088703 with:
           gas gas_remaining wei
          args 0, ext_call.return_dataaddr(ext_call.return_data), addr(this.address), this.address, _param4 * 10^(-ext_call.return_data[0] + 18), 0
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown9f6f3d5b(addr _param1, addr _param2, addr _param3, uint256 _param4, uint256 _param5): # not payable
  require calldata.size - 4 >= 160
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param2)
  call _param2.0x44e2a5a8 with:
       gas gas_remaining wei
      args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).dai(address param1) with:
          gas gas_remaining wei
         args addr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if 1000000000 * 10^18 * _param5 / 1000000000 * 10^18 != _param5:
      revert with 0, 'mul-overflow'
  if ext_call.return_data >= 1000000000 * 10^18 * _param5:
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param4, 0, 0
  else:
      if 1000000000 * 10^18 * _param5 / 1000000000 * 10^18 != _param5:
          revert with 0, 'mul-overflow'
      if (1000000000 * 10^18 * _param5) - ext_call.return_data > 1000000000 * 10^18 * _param5:
          revert with 0, 'sub-overflow'
      require ext_call.return_data[0]
      if (1000000000 * 10^18 * _param5) - ext_call.return_data / ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      if 1000000000 * 10^18 * _param5 / 1000000000 * 10^18 != _param5:
          revert with 0, 'mul-overflow'
      if not ext_call.return_data[0]:
          require ext_code.size(_param1)
          if 0 < 1000000000 * 10^18 * _param5:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param4, 0, ((1000000000 * 10^18 * _param5) - ext_call.return_data / ext_call.return_data[0]) + 1
          else:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param4, 0, (1000000000 * 10^18 * _param5) - ext_call.return_data / ext_call.return_data[0]
      else:
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param5) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param5) - ext_call.return_data / ext_call.return_data[0]:
              revert with 0, 'mul-overflow'
          require ext_code.size(_param1)
          if (1000000000 * 10^18 * _param5) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param5:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param4, 0, ((1000000000 * 10^18 * _param5) - ext_call.return_data / ext_call.return_data[0]) + 1
          else:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param4, 0, (1000000000 * 10^18 * _param5) - ext_call.return_data / ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if 1000000000 * 10^18 * _param5 / 1000000000 * 10^18 != _param5:
      revert with 0, 'mul-overflow'
  require ext_code.size(_param1)
  call _param1.0xf9f30db6 with:
       gas gas_remaining wei
      args _param4, addr(this.address), 1000000000 * 10^18 * _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param3
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.0xef693bed with:
       gas gas_remaining wei
      args caller, _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownbe5e6c03(addr _param1, addr _param2, addr _param3, uint256 _param4, uint256 _param5, uint256 _param6): # not payable
  require calldata.size - 4 >= 192
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param3)
  call _param3.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
       gas gas_remaining wei
      args caller, this.address, _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param3), _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.0x3b4da69f with:
       gas gas_remaining wei
      args addr(ext_call.return_data), _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if _param5 <â€² 0:
      revert with 0, 'int-overflow'
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).dai(address param1) with:
          gas gas_remaining wei
         args addr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0xd9638d36 with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 160
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x2424be5c with:
          gas gas_remaining wei
         args ext_call.return_dataaddr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 64
  require ext_call.return_data[32]
  if ext_call.return_data / ext_call.return_data <â€² 0:
      revert with 0, 'int-overflow'
  if ext_call.return_data / ext_call.return_data <= ext_call.return_data[32]:
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param4, -_param5, -ext_call.return_data / ext_call.return_data[32]
  else:
      if ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param4, -_param5, -ext_call.return_data[32]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x9bb8f838 with:
       gas gas_remaining wei
      args _param4, addr(this.address), _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xef693bed with:
       gas gas_remaining wei
      args this.address, _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).withdraw(uint256 amount) with:
       gas gas_remaining wei
      args _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  call caller with:
     value _param5 wei
       gas 2300 * is_zero(value) wei

def unknown1c02d846(addr _param1, addr _param2, addr _param3, addr _param4, uint256 _param5, uint256 _param6) payable: 
  require calldata.size - 4 >= 192
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param3)
  call _param3.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).deposit() with:
     value call.value wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param3), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.0x3b4da69f with:
       gas gas_remaining wei
      args addr(ext_call.return_data), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if call.value <â€² 0:
      revert with 0, 'int-overflow'
  require ext_code.size(_param2)
  call _param2.0x44e2a5a8 with:
       gas gas_remaining wei
      args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).dai(address param1) with:
          gas gas_remaining wei
         args addr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if 1000000000 * 10^18 * _param6 / 1000000000 * 10^18 != _param6:
      revert with 0, 'mul-overflow'
  if ext_call.return_data >= 1000000000 * 10^18 * _param6:
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param5, call.value, 0
  else:
      if 1000000000 * 10^18 * _param6 / 1000000000 * 10^18 != _param6:
          revert with 0, 'mul-overflow'
      if (1000000000 * 10^18 * _param6) - ext_call.return_data > 1000000000 * 10^18 * _param6:
          revert with 0, 'sub-overflow'
      require ext_call.return_data[0]
      if (1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      if 1000000000 * 10^18 * _param6 / 1000000000 * 10^18 != _param6:
          revert with 0, 'mul-overflow'
      if not ext_call.return_data[0]:
          require ext_code.size(_param1)
          if 0 < 1000000000 * 10^18 * _param6:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param5, call.value, ((1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data[0]) + 1
          else:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param5, call.value, (1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data[0]
      else:
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param6) - ext_call.return_data / ext_call.return_data[0]:
              revert with 0, 'mul-overflow'
          require ext_code.size(_param1)
          if (1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param6:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param5, call.value, ((1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data[0]) + 1
          else:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param5, call.value, (1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if 1000000000 * 10^18 * _param6 / 1000000000 * 10^18 != _param6:
      revert with 0, 'mul-overflow'
  require ext_code.size(_param1)
  call _param1.0xf9f30db6 with:
       gas gas_remaining wei
      args _param5, addr(this.address), 1000000000 * 10^18 * _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param4)
  call _param4.0xef693bed with:
       gas gas_remaining wei
      args caller, _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknowne685cc04(addr _param1, addr _param2, addr _param3, addr _param4, uint256 _param5, uint256 _param6) payable: 
  require calldata.size - 4 >= 192
  require ext_code.size(_param1)
  call _param1.0x6090dec5 with:
       gas gas_remaining wei
      args _param5, this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param3)
  call _param3.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).deposit() with:
     value call.value wei
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param3), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.0x3b4da69f with:
       gas gas_remaining wei
      args addr(ext_call.return_data), call.value
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if call.value <â€² 0:
      revert with 0, 'int-overflow'
  require ext_code.size(_param2)
  call _param2.0x44e2a5a8 with:
       gas gas_remaining wei
      args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).dai(address param1) with:
          gas gas_remaining wei
         args addr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if 1000000000 * 10^18 * _param6 / 1000000000 * 10^18 != _param6:
      revert with 0, 'mul-overflow'
  if ext_call.return_data >= 1000000000 * 10^18 * _param6:
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args ext_call.return_data[0], call.value, 0
  else:
      if 1000000000 * 10^18 * _param6 / 1000000000 * 10^18 != _param6:
          revert with 0, 'mul-overflow'
      if (1000000000 * 10^18 * _param6) - ext_call.return_data > 1000000000 * 10^18 * _param6:
          revert with 0, 'sub-overflow'
      require ext_call.return_data[0]
      if (1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      if 1000000000 * 10^18 * _param6 / 1000000000 * 10^18 != _param6:
          revert with 0, 'mul-overflow'
      if not ext_call.return_data[0]:
          require ext_code.size(_param1)
          if 0 < 1000000000 * 10^18 * _param6:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args ext_call.return_data * _param6) - ext_call.return_data / ext_call.return_data[0]) + 1
          else:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args ext_call.return_data * _param6) - ext_call.return_data / ext_call.return_data[0]
      else:
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param6) - ext_call.return_data / ext_call.return_data[0]:
              revert with 0, 'mul-overflow'
          require ext_code.size(_param1)
          if (1000000000 * 10^18 * _param6) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param6:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args ext_call.return_data * _param6) - ext_call.return_data / ext_call.return_data[0]) + 1
          else:
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args ext_call.return_data * _param6) - ext_call.return_data / ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if 1000000000 * 10^18 * _param6 / 1000000000 * 10^18 != _param6:
      revert with 0, 'mul-overflow'
  require ext_code.size(_param1)
  call _param1.0xf9f30db6 with:
       gas gas_remaining wei
      args ext_call.return_dataaddr(this.address), 1000000000 * 10^18 * _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param4)
  call _param4.0xef693bed with:
       gas gas_remaining wei
      args caller, _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  return ext_call.return_data[0]

def unknowna6add011(addr _param1, addr _param2, addr _param3, uint256 _param4, uint256 _param5, uint256 _param6): # not payable
  require calldata.size - 4 >= 192
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param3)
  call _param3.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
       gas gas_remaining wei
      args caller, this.address, _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param3), _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.0x3b4da69f with:
       gas gas_remaining wei
      args addr(ext_call.return_data), _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(_param1)
      static call _param1.0x36569e77 with:
              gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(_param1)
      static call _param1.0x36569e77 with:
              gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(_param1)
      static call _param1.0x2c2cb9fd with:
              gas gas_remaining wei
             args _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0xd9638d36 with:
              gas gas_remaining wei
             args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 160
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0x2424be5c with:
              gas gas_remaining wei
             args ext_call.return_dataaddr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 64
      require ext_call.return_data[32]
      if ext_call.return_data / ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      if ext_call.return_data / ext_call.return_data <= ext_call.return_data[32]:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param4, 0, -ext_call.return_data / ext_call.return_data[32]
      else:
          if ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param4, 0, -ext_call.return_data[32]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.0x9bb8f838 with:
           gas gas_remaining wei
          args _param4, addr(this.address), 0
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param5 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param5:
          revert with 0, 'mul-overflow'
      if _param5 * 10^(-ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(_param1)
      static call _param1.0x36569e77 with:
              gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(_param1)
      static call _param1.0x36569e77 with:
              gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(_param1)
      static call _param1.0x2c2cb9fd with:
              gas gas_remaining wei
             args _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0xd9638d36 with:
              gas gas_remaining wei
             args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 160
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0x2424be5c with:
              gas gas_remaining wei
             args ext_call.return_dataaddr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 64
      require ext_call.return_data[32]
      if ext_call.return_data / ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      if ext_call.return_data / ext_call.return_data <= ext_call.return_data[32]:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param4, -1 * _param5 * 10^(-ext_call.return_data / ext_call.return_data[32]
      else:
          if ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param4, -1 * _param5 * 10^(-ext_call.return_data[0] + 18), -ext_call.return_data[32]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.0x9bb8f838 with:
           gas gas_remaining wei
          args _param4, addr(this.address), _param5 * 10^(-ext_call.return_data[0] + 18)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xef693bed with:
       gas gas_remaining wei
      args caller, _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown4b666199(addr _param1, addr _param2, uint256 _param3, uint256 _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x8161b120 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if this.address == ext_call.return_data[12 len 20]:
      require ext_code.size(_param2)
      call _param2.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      call _param2.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param2), _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      call _param2.0x3b4da69f with:
           gas gas_remaining wei
          args addr(ext_call.return_data), _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0xd9638d36 with:
              gas gas_remaining wei
             args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 160
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0x2424be5c with:
              gas gas_remaining wei
             args ext_call.return_dataaddr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 64
      require ext_call.return_data[32]
      if ext_call.return_data / ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      if ext_call.return_data / ext_call.return_data <= ext_call.return_data[32]:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param3, 0, -ext_call.return_data / ext_call.return_data[32]
      else:
          if ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param3, 0, -ext_call.return_data[32]
  else:
      require ext_code.size(_param1)
      static call _param1.0x5aebb460 with:
              gas gas_remaining wei
             args addr(ext_call.return_data), _param3, this.address
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(_param2)
      call _param2.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      call _param2.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param2), _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      if ext_call.return_data[0] != 1:
          call _param2.0x3b4da69f with:
               gas gas_remaining wei
              args addr(this.address), _param4
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).0xd9638d36 with:
                  gas gas_remaining wei
                 args ext_call.return_data[0]
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 160
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).0x2424be5c with:
                  gas gas_remaining wei
                 args ext_call.return_dataaddr(ext_call.return_data)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 64
          require ext_call.return_data[32]
          if 1000000000 * 10^18 * _param4 / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if 1000000000 * 10^18 * _param4 / ext_call.return_data <= ext_call.return_data[32]:
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).0x76088703 with:
                   gas gas_remaining wei
                  args 0, ext_call.return_dataaddr(this.address), addr(this.address), 0, -1000000000 * 10^18 * _param4 / ext_call.return_data[32]
          else:
              if ext_call.return_data <â€² 0:
                  revert with 0, 'int-overflow'
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).0x76088703 with:
                   gas gas_remaining wei
                  args 0, ext_call.return_dataaddr(this.address), addr(this.address), 0, -ext_call.return_data[32]
      else:
          call _param2.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), _param4
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).dai(address param1) with:
                  gas gas_remaining wei
                 args addr(ext_call.return_data)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).0xd9638d36 with:
                  gas gas_remaining wei
                 args ext_call.return_data[0]
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 160
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).0x2424be5c with:
                  gas gas_remaining wei
                 args ext_call.return_dataaddr(ext_call.return_data)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 64
          require ext_call.return_data[32]
          if ext_call.return_data / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if ext_call.return_data / ext_call.return_data <= ext_call.return_data[32]:
              require ext_code.size(_param1)
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param3, 0, -ext_call.return_data / ext_call.return_data[32]
          else:
              if ext_call.return_data <â€² 0:
                  revert with 0, 'int-overflow'
              require ext_code.size(_param1)
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param3, 0, -ext_call.return_data[32]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown2958f8a5(addr _param1, addr _param2, uint256 _param3, uint256 _param4, addr _param5): # not payable
  require calldata.size - 4 >= 160
  require ext_code.size(_param1)
  static call _param1.0x8161b120 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data_param5:
      revert with 0, 'owner-missmatch'
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x8161b120 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if this.address == ext_call.return_data[12 len 20]:
      require ext_code.size(_param2)
      call _param2.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      call _param2.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param2), _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      call _param2.0x3b4da69f with:
           gas gas_remaining wei
          args addr(ext_call.return_data), _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0xd9638d36 with:
              gas gas_remaining wei
             args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 160
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0x2424be5c with:
              gas gas_remaining wei
             args ext_call.return_dataaddr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 64
      require ext_call.return_data[32]
      if ext_call.return_data / ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      if ext_call.return_data / ext_call.return_data <= ext_call.return_data[32]:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param3, 0, -ext_call.return_data / ext_call.return_data[32]
      else:
          if ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param3, 0, -ext_call.return_data[32]
  else:
      require ext_code.size(_param1)
      static call _param1.0x5aebb460 with:
              gas gas_remaining wei
             args addr(ext_call.return_data), _param3, this.address
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(_param2)
      call _param2.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      call _param2.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param2), _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param2)
      if ext_call.return_data[0] != 1:
          call _param2.0x3b4da69f with:
               gas gas_remaining wei
              args addr(this.address), _param4
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).0xd9638d36 with:
                  gas gas_remaining wei
                 args ext_call.return_data[0]
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 160
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).0x2424be5c with:
                  gas gas_remaining wei
                 args ext_call.return_dataaddr(ext_call.return_data)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 64
          require ext_call.return_data[32]
          if 1000000000 * 10^18 * _param4 / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if 1000000000 * 10^18 * _param4 / ext_call.return_data <= ext_call.return_data[32]:
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).0x76088703 with:
                   gas gas_remaining wei
                  args 0, ext_call.return_dataaddr(this.address), addr(this.address), 0, -1000000000 * 10^18 * _param4 / ext_call.return_data[32]
          else:
              if ext_call.return_data <â€² 0:
                  revert with 0, 'int-overflow'
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).0x76088703 with:
                   gas gas_remaining wei
                  args 0, ext_call.return_dataaddr(this.address), addr(this.address), 0, -ext_call.return_data[32]
      else:
          call _param2.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), _param4
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).dai(address param1) with:
                  gas gas_remaining wei
                 args addr(ext_call.return_data)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).0xd9638d36 with:
                  gas gas_remaining wei
                 args ext_call.return_data[0]
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 160
          require ext_code.size(addr(ext_call.return_data))
          static call addr(ext_call.return_data).0x2424be5c with:
                  gas gas_remaining wei
                 args ext_call.return_dataaddr(ext_call.return_data)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 64
          require ext_call.return_data[32]
          if ext_call.return_data / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if ext_call.return_data / ext_call.return_data <= ext_call.return_data[32]:
              require ext_code.size(_param1)
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param3, 0, -ext_call.return_data / ext_call.return_data[32]
          else:
              if ext_call.return_data <â€² 0:
                  revert with 0, 'int-overflow'
              require ext_code.size(_param1)
              call _param1.0x45e6bdcd with:
                   gas gas_remaining wei
                  args _param3, 0, -ext_call.return_data[32]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown6d68b70b(addr _param1, addr _param2, addr _param3, uint256 _param4, uint256 _param5): # not payable
  require calldata.size - 4 >= 160
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x2424be5c with:
          gas gas_remaining wei
         args ext_call.return_dataaddr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 64
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0xd9638d36 with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 160
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x2424be5c with:
          gas gas_remaining wei
         args ext_call.return_dataaddr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 64
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).dai(address param1) with:
          gas gas_remaining wei
         args addr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[32]:
      if -ext_call.return_data > 0:
          revert with 0, 'sub-overflow'
      if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != -ext_call.return_data / 1000000000 * 10^18:
          revert with 0, 'mul-overflow'
      require ext_code.size(_param3)
      call _param3.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 < -ext_call.return_data[0]:
          call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
               gas gas_remaining wei
              args caller, this.address, (-ext_call.return_data / 1000000000 * 10^18) + 1
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).approve(address spender, uint256 value) with:
               gas gas_remaining wei
              args addr(_param3), (-ext_call.return_data / 1000000000 * 10^18) + 1
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), (-ext_call.return_data / 1000000000 * 10^18) + 1
      else:
          call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
               gas gas_remaining wei
              args caller, this.address, -ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).approve(address spender, uint256 value) with:
               gas gas_remaining wei
              args addr(_param3), -ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), -ext_call.return_data / 1000000000 * 10^18
  else:
      require ext_call.return_data[32]
      if ext_call.return_data * ext_call.return_data / ext_call.return_data[32] != ext_call.return_data[32]:
          revert with 0, 'mul-overflow'
      if (ext_call.return_data * ext_call.return_data > ext_call.return_data * ext_call.return_data[32]:
          revert with 0, 'sub-overflow'
      if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18:
          revert with 0, 'mul-overflow'
      require ext_code.size(_param3)
      call _param3.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 < (ext_call.return_data * ext_call.return_data[32]) - ext_call.return_data[0]:
          call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
               gas gas_remaining wei
              args caller, this.address, ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).approve(address spender, uint256 value) with:
               gas gas_remaining wei
              args addr(_param3), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
      else:
          call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
               gas gas_remaining wei
              args caller, this.address, (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).approve(address spender, uint256 value) with:
               gas gas_remaining wei
              args addr(_param3), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if _param5 <â€² 0:
      revert with 0, 'int-overflow'
  require ext_code.size(_param1)
  call _param1.0x45e6bdcd with:
       gas gas_remaining wei
      args _param4, -_param5, -ext_call.return_data[32]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x9bb8f838 with:
       gas gas_remaining wei
      args _param4, addr(this.address), _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xef693bed with:
       gas gas_remaining wei
      args this.address, _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).withdraw(uint256 amount) with:
       gas gas_remaining wei
      args _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  call caller with:
     value _param5 wei
       gas 2300 * is_zero(value) wei

def unknowncbd4be3f(addr _param1, addr _param2, addr _param3, addr _param4, uint256 _param5, uint256 _param6, uint256 _param7, bool _param8): # not payable
  require calldata.size - 4 >= 256
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param3)
  if _param8:
      call _param3.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param6
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param3)
      call _param3.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param3), _param6
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  call _param3.0x3b4da69f with:
       gas gas_remaining wei
      args addr(ext_call.return_data), _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(_param2)
      call _param2.0x44e2a5a8 with:
           gas gas_remaining wei
          args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
          revert with 0, 'mul-overflow'
      if ext_call.return_data >= 1000000000 * 10^18 * _param7:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param5, 0, 0
      else:
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if (1000000000 * 10^18 * _param7) - ext_call.return_data > 1000000000 * 10^18 * _param7:
              revert with 0, 'sub-overflow'
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if not ext_call.return_data[0]:
              require ext_code.size(_param1)
              if 0 < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args _param5, 0, ((1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args _param5, 0, (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data[0]
          else:
              require ext_call.return_data[0]
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param1)
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args _param5, 0, ((1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args _param5, 0, (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data[0]
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param6 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param6:
          revert with 0, 'mul-overflow'
      if _param6 * 10^(-ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(_param2)
      call _param2.0x44e2a5a8 with:
           gas gas_remaining wei
          args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
          revert with 0, 'mul-overflow'
      if ext_call.return_data >= 1000000000 * 10^18 * _param7:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param5, _param6 * 10^(-ext_call.return_data[0] + 18), 0
      else:
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if (1000000000 * 10^18 * _param7) - ext_call.return_data > 1000000000 * 10^18 * _param7:
              revert with 0, 'sub-overflow'
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if not ext_call.return_data[0]:
              require ext_code.size(_param1)
              if 0 < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args _param5, _param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args _param5, _param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
          else:
              require ext_call.return_data[0]
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param1)
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args _param5, _param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args _param5, _param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
      revert with 0, 'mul-overflow'
  require ext_code.size(_param1)
  call _param1.0xf9f30db6 with:
       gas gas_remaining wei
      args _param5, addr(this.address), 1000000000 * 10^18 * _param7
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param4)
  call _param4.0xef693bed with:
       gas gas_remaining wei
      args caller, _param7
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownc0791710(addr _param1, addr _param2, addr _param3, addr _param4, uint256 _param5, uint256 _param6, uint256 _param7): # not payable
  require calldata.size - 4 >= 224
  require ext_code.size(_param3)
  static call _param3.0x8c4c2801 with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param3)
  if not ext_call.return_data[12 len 20]:
      call _param3.0x1060930d with:
           gas gas_remaining wei
          args this.address
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
  call _param3.gem() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).transfer(address to, uint256 value) with:
       gas gas_remaining wei
      args addr(ext_call.return_data), _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x6090dec5 with:
       gas gas_remaining wei
      args _param5, this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param3)
  call _param3.0x3b4da69f with:
       gas gas_remaining wei
      args addr(ext_call.return_data), _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(_param2)
      call _param2.0x44e2a5a8 with:
           gas gas_remaining wei
          args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
          revert with 0, 'mul-overflow'
      if ext_call.return_data >= 1000000000 * 10^18 * _param7:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args ext_call.return_data[0], 0, 0
      else:
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if (1000000000 * 10^18 * _param7) - ext_call.return_data > 1000000000 * 10^18 * _param7:
              revert with 0, 'sub-overflow'
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if not ext_call.return_data[0]:
              require ext_code.size(_param1)
              if 0 < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
          else:
              require ext_call.return_data[0]
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param1)
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param6 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param6:
          revert with 0, 'mul-overflow'
      if _param6 * 10^(-ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(_param2)
      call _param2.0x44e2a5a8 with:
           gas gas_remaining wei
          args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
          revert with 0, 'mul-overflow'
      if ext_call.return_data >= 1000000000 * 10^18 * _param7:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args ext_call.return_data_param6 * 10^(-ext_call.return_data[0] + 18), 0
      else:
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if (1000000000 * 10^18 * _param7) - ext_call.return_data > 1000000000 * 10^18 * _param7:
              revert with 0, 'sub-overflow'
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if not ext_call.return_data[0]:
              require ext_code.size(_param1)
              if 0 < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data_param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data_param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
          else:
              require ext_call.return_data[0]
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param1)
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data_param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data_param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
      revert with 0, 'mul-overflow'
  require ext_code.size(_param1)
  call _param1.0xf9f30db6 with:
       gas gas_remaining wei
      args ext_call.return_dataaddr(this.address), 1000000000 * 10^18 * _param7
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param4)
  call _param4.0xef693bed with:
       gas gas_remaining wei
      args caller, _param7
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  return addr(ext_call.return_data), ext_call.return_data[0]

def unknownbcd6deec(addr _param1, addr _param2, addr _param3, uint256 _param4, uint256 _param5): # not payable
  require calldata.size - 4 >= 160
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x2424be5c with:
          gas gas_remaining wei
         args ext_call.return_dataaddr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 64
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0xd9638d36 with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 160
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x2424be5c with:
          gas gas_remaining wei
         args ext_call.return_dataaddr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 64
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).dai(address param1) with:
          gas gas_remaining wei
         args addr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[32]:
      if -ext_call.return_data > 0:
          revert with 0, 'sub-overflow'
      if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != -ext_call.return_data / 1000000000 * 10^18:
          revert with 0, 'mul-overflow'
      require ext_code.size(_param3)
      call _param3.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 < -ext_call.return_data[0]:
          call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
               gas gas_remaining wei
              args caller, this.address, (-ext_call.return_data / 1000000000 * 10^18) + 1
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).approve(address spender, uint256 value) with:
               gas gas_remaining wei
              args addr(_param3), (-ext_call.return_data / 1000000000 * 10^18) + 1
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), (-ext_call.return_data / 1000000000 * 10^18) + 1
      else:
          call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
               gas gas_remaining wei
              args caller, this.address, -ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).approve(address spender, uint256 value) with:
               gas gas_remaining wei
              args addr(_param3), -ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), -ext_call.return_data / 1000000000 * 10^18
  else:
      require ext_call.return_data[32]
      if ext_call.return_data * ext_call.return_data / ext_call.return_data[32] != ext_call.return_data[32]:
          revert with 0, 'mul-overflow'
      if (ext_call.return_data * ext_call.return_data > ext_call.return_data * ext_call.return_data[32]:
          revert with 0, 'sub-overflow'
      if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18:
          revert with 0, 'mul-overflow'
      require ext_code.size(_param3)
      call _param3.dai() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 < (ext_call.return_data * ext_call.return_data[32]) - ext_call.return_data[0]:
          call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
               gas gas_remaining wei
              args caller, this.address, ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).approve(address spender, uint256 value) with:
               gas gas_remaining wei
              args addr(_param3), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
      else:
          call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
               gas gas_remaining wei
              args caller, this.address, (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).approve(address spender, uint256 value) with:
               gas gas_remaining wei
              args addr(_param3), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param3)
          call _param3.0x3b4da69f with:
               gas gas_remaining wei
              args addr(ext_call.return_data), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param4, 0, -ext_call.return_data[32]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.0x9bb8f838 with:
           gas gas_remaining wei
          args _param4, addr(this.address), 0
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param5 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param5:
          revert with 0, 'mul-overflow'
      if _param5 * 10^(-ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param4, -1 * _param5 * 10^(-ext_call.return_data[0] + 18), -ext_call.return_data[32]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.0x9bb8f838 with:
           gas gas_remaining wei
          args _param4, addr(this.address), _param5 * 10^(-ext_call.return_data[0] + 18)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param2)
  call _param2.0xef693bed with:
       gas gas_remaining wei
      args caller, _param5
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknowndb802a32(addr _param1, addr _param2, addr _param3, addr _param4, uint256 _param5, uint256 _param6, uint256 _param7, bool _param8): # not payable
  require calldata.size - 4 >= 256
  require ext_code.size(_param1)
  call _param1.0x6090dec5 with:
       gas gas_remaining wei
      args _param5, this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param3)
  if _param8:
      call _param3.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args caller, this.address, _param6
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param3)
      call _param3.gem() with:
           gas gas_remaining wei
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).approve(address spender, uint256 value) with:
           gas gas_remaining wei
          args addr(_param3), _param6
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  call _param3.0x3b4da69f with:
       gas gas_remaining wei
      args addr(ext_call.return_data), _param6
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param3)
  call _param3.0xb3bcfa82 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not 10^(-ext_call.return_data[0] + 18):
      require ext_code.size(_param2)
      call _param2.0x44e2a5a8 with:
           gas gas_remaining wei
          args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
          revert with 0, 'mul-overflow'
      if ext_call.return_data >= 1000000000 * 10^18 * _param7:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args ext_call.return_data[0], 0, 0
      else:
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if (1000000000 * 10^18 * _param7) - ext_call.return_data > 1000000000 * 10^18 * _param7:
              revert with 0, 'sub-overflow'
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if not ext_call.return_data[0]:
              require ext_code.size(_param1)
              if 0 < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
          else:
              require ext_call.return_data[0]
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param1)
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
  else:
      require 10^(-ext_call.return_data[0] + 18)
      if _param6 * 10^(-ext_call.return_data / 10^(-ext_call.return_data_param6:
          revert with 0, 'mul-overflow'
      if _param6 * 10^(-ext_call.return_data <â€² 0:
          revert with 0, 'int-overflow'
      require ext_code.size(_param2)
      call _param2.0x44e2a5a8 with:
           gas gas_remaining wei
          args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
          revert with 0, 'mul-overflow'
      if ext_call.return_data >= 1000000000 * 10^18 * _param7:
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args ext_call.return_data_param6 * 10^(-ext_call.return_data[0] + 18), 0
      else:
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if (1000000000 * 10^18 * _param7) - ext_call.return_data > 1000000000 * 10^18 * _param7:
              revert with 0, 'sub-overflow'
          require ext_call.return_data[0]
          if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data <â€² 0:
              revert with 0, 'int-overflow'
          if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
              revert with 0, 'mul-overflow'
          if not ext_call.return_data[0]:
              require ext_code.size(_param1)
              if 0 < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data_param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data_param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
          else:
              require ext_call.return_data[0]
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data / ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param1)
              if (1000000000 * 10^18 * _param7) - ext_call.return_data / ext_call.return_data * ext_call.return_data < 1000000000 * 10^18 * _param7:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data_param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]) + 1
              else:
                  call _param1.0x45e6bdcd with:
                       gas gas_remaining wei
                      args ext_call.return_data_param6 * 10^(-ext_call.return_data * _param7) - ext_call.return_data / ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  if 1000000000 * 10^18 * _param7 / 1000000000 * 10^18 != _param7:
      revert with 0, 'mul-overflow'
  require ext_code.size(_param1)
  call _param1.0xf9f30db6 with:
       gas gas_remaining wei
      args ext_call.return_dataaddr(this.address), 1000000000 * 10^18 * _param7
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param4
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param4
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param4)
  call _param4.0xef693bed with:
       gas gas_remaining wei
      args caller, _param7
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  return ext_call.return_data[0]

def unknown036a2395(addr _param1, addr _param2, uint256 _param3): # not payable
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x2424be5c with:
          gas gas_remaining wei
         args ext_call.return_dataaddr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 64
  require ext_code.size(_param1)
  static call _param1.0x8161b120 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if this.address == ext_call.return_data[12 len 20]:
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0xd9638d36 with:
              gas gas_remaining wei
             args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 160
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0x2424be5c with:
              gas gas_remaining wei
             args ext_call.return_dataaddr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 64
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if not ext_call.return_data[32]:
          if -ext_call.return_data > 0:
              revert with 0, 'sub-overflow'
          if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != -ext_call.return_data / 1000000000 * 10^18:
              revert with 0, 'mul-overflow'
          require ext_code.size(_param2)
          call _param2.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 < -ext_call.return_data[0]:
              call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                   gas gas_remaining wei
                  args caller, this.address, (-ext_call.return_data / 1000000000 * 10^18) + 1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                   gas gas_remaining wei
                  args addr(_param2), (-ext_call.return_data / 1000000000 * 10^18) + 1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.0x3b4da69f with:
                   gas gas_remaining wei
                  args addr(ext_call.return_data), (-ext_call.return_data / 1000000000 * 10^18) + 1
          else:
              call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                   gas gas_remaining wei
                  args caller, this.address, -ext_call.return_data / 1000000000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                   gas gas_remaining wei
                  args addr(_param2), -ext_call.return_data / 1000000000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.0x3b4da69f with:
                   gas gas_remaining wei
                  args addr(ext_call.return_data), -ext_call.return_data / 1000000000 * 10^18
      else:
          require ext_call.return_data[32]
          if ext_call.return_data * ext_call.return_data / ext_call.return_data[32] != ext_call.return_data[32]:
              revert with 0, 'mul-overflow'
          if (ext_call.return_data * ext_call.return_data > ext_call.return_data * ext_call.return_data[32]:
              revert with 0, 'sub-overflow'
          if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18:
              revert with 0, 'mul-overflow'
          require ext_code.size(_param2)
          call _param2.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 < (ext_call.return_data * ext_call.return_data[32]) - ext_call.return_data[0]:
              call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                   gas gas_remaining wei
                  args caller, this.address, ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                   gas gas_remaining wei
                  args addr(_param2), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.0x3b4da69f with:
                   gas gas_remaining wei
                  args addr(ext_call.return_data), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
          else:
              call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                   gas gas_remaining wei
                  args caller, this.address, (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                   gas gas_remaining wei
                  args addr(_param2), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.0x3b4da69f with:
                   gas gas_remaining wei
                  args addr(ext_call.return_data), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param3, 0, -ext_call.return_data[32]
  else:
      require ext_code.size(_param1)
      static call _param1.0x5aebb460 with:
              gas gas_remaining wei
             args addr(ext_call.return_data), _param3, this.address
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0xd9638d36 with:
              gas gas_remaining wei
             args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 160
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0x2424be5c with:
              gas gas_remaining wei
             args ext_call.return_dataaddr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 64
      require ext_code.size(addr(ext_call.return_data))
      if ext_call.return_data[0] != 1:
          static call addr(ext_call.return_data).dai(address param1) with:
                  gas gas_remaining wei
                 args this.address
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          if not ext_call.return_data[32]:
              if -ext_call.return_data > 0:
                  revert with 0, 'sub-overflow'
              if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != -ext_call.return_data / 1000000000 * 10^18:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 < -ext_call.return_data[0]:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, (-ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), (-ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(this.address), (-ext_call.return_data / 1000000000 * 10^18) + 1
              else:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, -ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), -ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(this.address), -ext_call.return_data / 1000000000 * 10^18
          else:
              require ext_call.return_data[32]
              if ext_call.return_data * ext_call.return_data / ext_call.return_data[32] != ext_call.return_data[32]:
                  revert with 0, 'mul-overflow'
              if (ext_call.return_data * ext_call.return_data > ext_call.return_data * ext_call.return_data[32]:
                  revert with 0, 'sub-overflow'
              if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 < (ext_call.return_data * ext_call.return_data[32]) - ext_call.return_data[0]:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(this.address), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
              else:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(this.address), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).0x76088703 with:
               gas gas_remaining wei
              args 0, ext_call.return_data[32], 0, this.address, this.address, 0, -ext_call.return_data[32]
      else:
          static call addr(ext_call.return_data).dai(address param1) with:
                  gas gas_remaining wei
                 args addr(ext_call.return_data)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          if not ext_call.return_data[32]:
              if -ext_call.return_data > 0:
                  revert with 0, 'sub-overflow'
              if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != -ext_call.return_data / 1000000000 * 10^18:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 < -ext_call.return_data[0]:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, (-ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), (-ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(ext_call.return_data), (-ext_call.return_data / 1000000000 * 10^18) + 1
              else:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, -ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), -ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(ext_call.return_data), -ext_call.return_data / 1000000000 * 10^18
          else:
              require ext_call.return_data[32]
              if ext_call.return_data * ext_call.return_data / ext_call.return_data[32] != ext_call.return_data[32]:
                  revert with 0, 'mul-overflow'
              if (ext_call.return_data * ext_call.return_data > ext_call.return_data * ext_call.return_data[32]:
                  revert with 0, 'sub-overflow'
              if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 < (ext_call.return_data * ext_call.return_data[32]) - ext_call.return_data[0]:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(ext_call.return_data), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
              else:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(ext_call.return_data), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param3, 0, -ext_call.return_data[32]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown0aee8dec(addr _param1, addr _param2, uint256 _param3, addr _param4): # not payable
  require calldata.size - 4 >= 128
  require ext_code.size(_param1)
  static call _param1.0x8161b120 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data_param4:
      revert with 0, 'owner-missmatch'
  require ext_code.size(_param1)
  static call _param1.0x36569e77 with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2726b073 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  static call _param1.0x2c2cb9fd with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x2424be5c with:
          gas gas_remaining wei
         args ext_call.return_dataaddr(ext_call.return_data)
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 64
  require ext_code.size(_param1)
  static call _param1.0x8161b120 with:
          gas gas_remaining wei
         args _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if this.address == ext_call.return_data[12 len 20]:
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0xd9638d36 with:
              gas gas_remaining wei
             args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 160
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0x2424be5c with:
              gas gas_remaining wei
             args ext_call.return_dataaddr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 64
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).dai(address param1) with:
              gas gas_remaining wei
             args addr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if not ext_call.return_data[32]:
          if -ext_call.return_data > 0:
              revert with 0, 'sub-overflow'
          if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != -ext_call.return_data / 1000000000 * 10^18:
              revert with 0, 'mul-overflow'
          require ext_code.size(_param2)
          call _param2.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 < -ext_call.return_data[0]:
              call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                   gas gas_remaining wei
                  args caller, this.address, (-ext_call.return_data / 1000000000 * 10^18) + 1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                   gas gas_remaining wei
                  args addr(_param2), (-ext_call.return_data / 1000000000 * 10^18) + 1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.0x3b4da69f with:
                   gas gas_remaining wei
                  args addr(ext_call.return_data), (-ext_call.return_data / 1000000000 * 10^18) + 1
          else:
              call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                   gas gas_remaining wei
                  args caller, this.address, -ext_call.return_data / 1000000000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                   gas gas_remaining wei
                  args addr(_param2), -ext_call.return_data / 1000000000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.0x3b4da69f with:
                   gas gas_remaining wei
                  args addr(ext_call.return_data), -ext_call.return_data / 1000000000 * 10^18
      else:
          require ext_call.return_data[32]
          if ext_call.return_data * ext_call.return_data / ext_call.return_data[32] != ext_call.return_data[32]:
              revert with 0, 'mul-overflow'
          if (ext_call.return_data * ext_call.return_data > ext_call.return_data * ext_call.return_data[32]:
              revert with 0, 'sub-overflow'
          if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18:
              revert with 0, 'mul-overflow'
          require ext_code.size(_param2)
          call _param2.dai() with:
               gas gas_remaining wei
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          require ext_code.size(addr(ext_call.return_data))
          if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 < (ext_call.return_data * ext_call.return_data[32]) - ext_call.return_data[0]:
              call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                   gas gas_remaining wei
                  args caller, this.address, ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                   gas gas_remaining wei
                  args addr(_param2), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.0x3b4da69f with:
                   gas gas_remaining wei
                  args addr(ext_call.return_data), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
          else:
              call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                   gas gas_remaining wei
                  args caller, this.address, (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                   gas gas_remaining wei
                  args addr(_param2), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require ext_code.size(_param2)
              call _param2.0x3b4da69f with:
                   gas gas_remaining wei
                  args addr(ext_call.return_data), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require ext_code.size(_param1)
      call _param1.0x45e6bdcd with:
           gas gas_remaining wei
          args _param3, 0, -ext_call.return_data[32]
  else:
      require ext_code.size(_param1)
      static call _param1.0x5aebb460 with:
              gas gas_remaining wei
             args addr(ext_call.return_data), _param3, this.address
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0xd9638d36 with:
              gas gas_remaining wei
             args ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 160
      require ext_code.size(addr(ext_call.return_data))
      static call addr(ext_call.return_data).0x2424be5c with:
              gas gas_remaining wei
             args ext_call.return_dataaddr(ext_call.return_data)
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 64
      require ext_code.size(addr(ext_call.return_data))
      if ext_call.return_data[0] != 1:
          static call addr(ext_call.return_data).dai(address param1) with:
                  gas gas_remaining wei
                 args this.address
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          if not ext_call.return_data[32]:
              if -ext_call.return_data > 0:
                  revert with 0, 'sub-overflow'
              if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != -ext_call.return_data / 1000000000 * 10^18:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 < -ext_call.return_data[0]:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, (-ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), (-ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(this.address), (-ext_call.return_data / 1000000000 * 10^18) + 1
              else:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, -ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), -ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(this.address), -ext_call.return_data / 1000000000 * 10^18
          else:
              require ext_call.return_data[32]
              if ext_call.return_data * ext_call.return_data / ext_call.return_data[32] != ext_call.return_data[32]:
                  revert with 0, 'mul-overflow'
              if (ext_call.return_data * ext_call.return_data > ext_call.return_data * ext_call.return_data[32]:
                  revert with 0, 'sub-overflow'
              if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 < (ext_call.return_data * ext_call.return_data[32]) - ext_call.return_data[0]:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(this.address), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
              else:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(this.address), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(addr(ext_call.return_data))
          call addr(ext_call.return_data).0x76088703 with:
               gas gas_remaining wei
              args 0, ext_call.return_data[32], 0, this.address, this.address, 0, -ext_call.return_data[32]
      else:
          static call addr(ext_call.return_data).dai(address param1) with:
                  gas gas_remaining wei
                 args addr(ext_call.return_data)
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          if not ext_call.return_data[32]:
              if -ext_call.return_data > 0:
                  revert with 0, 'sub-overflow'
              if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != -ext_call.return_data / 1000000000 * 10^18:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              if 1000000000 * 10^18 * -ext_call.return_data / 1000000000 * 10^18 < -ext_call.return_data[0]:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, (-ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), (-ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(ext_call.return_data), (-ext_call.return_data / 1000000000 * 10^18) + 1
              else:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, -ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), -ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(ext_call.return_data), -ext_call.return_data / 1000000000 * 10^18
          else:
              require ext_call.return_data[32]
              if ext_call.return_data * ext_call.return_data / ext_call.return_data[32] != ext_call.return_data[32]:
                  revert with 0, 'mul-overflow'
              if (ext_call.return_data * ext_call.return_data > ext_call.return_data * ext_call.return_data[32]:
                  revert with 0, 'sub-overflow'
              if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 / 1000000000 * 10^18 != (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18:
                  revert with 0, 'mul-overflow'
              require ext_code.size(_param2)
              call _param2.dai() with:
                   gas gas_remaining wei
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              require ext_code.size(addr(ext_call.return_data))
              if 1000000000 * 10^18 * (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18 < (ext_call.return_data * ext_call.return_data[32]) - ext_call.return_data[0]:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(ext_call.return_data), ((ext_call.return_data * ext_call.return_data / 1000000000 * 10^18) + 1
              else:
                  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
                       gas gas_remaining wei
                      args caller, this.address, (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.dai() with:
                       gas gas_remaining wei
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  require ext_code.size(addr(ext_call.return_data))
                  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
                       gas gas_remaining wei
                      args addr(_param2), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require ext_code.size(_param2)
                  call _param2.0x3b4da69f with:
                       gas gas_remaining wei
                      args addr(ext_call.return_data), (ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require ext_code.size(_param1)
          call _param1.0x45e6bdcd with:
               gas gas_remaining wei
              args _param3, 0, -ext_call.return_data[32]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

