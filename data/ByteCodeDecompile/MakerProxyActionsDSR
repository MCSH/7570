#
#  Panoramix v4 Oct 2019 
#  Decompiled source of 0x07ee93aEEa0a36FfF2A9B95dd22Bd6049EE54f26
# 
#  Let's make the world open source 
# 

def _fallback() payable: # default function
  revert

def unknownc56167c6(addr _param1, addr _param2, uint256 _param3) payable: 
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
       gas gas_remaining wei
      args caller, this.address, _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param1), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x3b4da69f with:
       gas gas_remaining wei
      args addr(_param2), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknownc77843b3(addr _param1, addr _param2) payable: 
  require calldata.size - 4 >= 64
  require ext_code.size(_param1)
  call _param1.0x36569e77 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param2)
  call _param2.drip() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param2)
  static call _param2.0xbebac86 with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param2)
  call _param2.exit(uint256 wad) with:
       gas gas_remaining wei
      args ext_call.return_data[0]
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param1
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param1
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  if not ext_call.return_data[0]:
      require ext_code.size(_param1)
      call _param1.0xef693bed with:
           gas gas_remaining wei
          args caller, 0
  else:
      require ext_call.return_data[0]
      if ext_call.return_data * ext_call.return_data / ext_call.return_data[0] != ext_call.return_data[0]:
          revert with 0, 'mul-overflow'
      require ext_code.size(_param1)
      call _param1.0xef693bed with:
           gas gas_remaining wei
          args caller, ext_call.return_data * ext_call.return_data / 1000000000 * 10^18
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown71006c09(addr _param1, addr _param2, uint256 _param3) payable: 
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.0x36569e77 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param2)
  call _param2.drip() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if 1000000000 * 10^18 * _param3 / 1000000000 * 10^18 != _param3:
      revert with 0, 'mul-overflow'
  require ext_call.return_data[0]
  require ext_code.size(_param2)
  call _param2.exit(uint256 wad) with:
       gas gas_remaining wei
      args (1000000000 * 10^18 * _param3 / ext_call.return_data[0])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x36569e77 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).dai(address param1) with:
          gas gas_remaining wei
         args this.address
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param1
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param1
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  if 1000000000 * 10^18 * _param3 / 1000000000 * 10^18 != _param3:
      revert with 0, 'mul-overflow'
  require ext_code.size(_param1)
  if ext_call.return_data >= 1000000000 * 10^18 * _param3:
      call _param1.0xef693bed with:
           gas gas_remaining wei
          args caller, _param3
  else:
      call _param1.0xef693bed with:
           gas gas_remaining wei
          args caller, ext_call.return_data / 1000000000 * 10^18
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown9f6c3dbd(addr _param1, addr _param2, uint256 _param3) payable: 
  require calldata.size - 4 >= 96
  require ext_code.size(_param1)
  call _param1.0x36569e77 with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param2)
  call _param2.drip() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(_param1)
  call _param1.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).transferFrom(address from, address to, uint256 value) with:
       gas gas_remaining wei
      args caller, this.address, _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.dai() with:
       gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).approve(address spender, uint256 value) with:
       gas gas_remaining wei
      args addr(_param1), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(_param1)
  call _param1.0x3b4da69f with:
       gas gas_remaining wei
      args addr(this.address), _param3
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).0x4538c4eb with:
          gas gas_remaining wei
         args this.address, _param2
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if not ext_call.return_data[0]:
      require ext_code.size(addr(ext_call.return_data))
      call addr(ext_call.return_data).0xa3b22fc4 with:
           gas gas_remaining wei
          args _param2
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
  if 1000000000 * 10^18 * _param3 / 1000000000 * 10^18 != _param3:
      revert with 0, 'mul-overflow'
  require ext_call.return_data[0]
  require ext_code.size(_param2)
  call _param2.join(uint256 wad) with:
       gas gas_remaining wei
      args (1000000000 * 10^18 * _param3 / ext_call.return_data[0])
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

