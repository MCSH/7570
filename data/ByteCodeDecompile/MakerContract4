#
#  Panoramix v4 Oct 2019 
#  Decompiled source of 0x9b0ccf7C8994E19F39b2B4CF708e0A7DF65fA8a3
# 
#  Let's make the world open source 
# 

const era = block.timestamp

def storage:
  authorityAddress is addr at storage 0
  owner is addr at storage 1
  voxAddress is addr at storage 2
  tubAddress is addr at storage 3
  tapAddress is addr at storage 4
  saiAddress is addr at storage 5
  sinAddress is addr at storage 6
  skrAddress is addr at storage 7
  gemAddress is addr at storage 8
  fix is uint256 at storage 9
  fit is uint256 at storage 10
  caged is uint256 at storage 11
  cooldown is uint256 at storage 12

def sin(): # not payable
  return sinAddress

def skr(): # not payable
  return skrAddress

def tub(): # not payable
  return tubAddress

def vox(): # not payable
  return voxAddress

def cooldown(): # not payable
  return cooldown

def gem(): # not payable
  return gemAddress

def owner(): # not payable
  return owner

def sai(): # not payable
  return saiAddress

def fix(): # not payable
  return fix

def authority(): # not payable
  return authorityAddress

def fit(): # not payable
  return fit

def caged(): # not payable
  return caged

def tap(): # not payable
  return tapAddress

#
#  Regular functions
#

def _fallback() payable: # default function
  revert

def setCooldown(uint256 _newCooldown): # not payable
  if this.address != caller:
      if owner != caller:
          require authorityAddress
          require ext_code.size(authorityAddress)
          call authorityAddress.canCall(address src, address dst, bytes4 sig) with:
               gas gas_remaining - 710 wei
              args caller, addr(this.address), call.func_hash
          require ext_call.success
          require ext_call.return_data[0]
  cooldown = _newCooldown

def setOwner(address _new): # not payable
  if this.address != caller:
      if owner != caller:
          require authorityAddress
          require ext_code.size(authorityAddress)
          call authorityAddress.canCall(address src, address dst, bytes4 sig) with:
               gas gas_remaining - 710 wei
              args caller, addr(this.address), call.func_hash
          require ext_call.success
          require ext_call.return_data[0]
  owner = _new
  log LogSetOwner(address owner=_new)

def setAuthority(address _authority): # not payable
  if this.address != caller:
      if owner != caller:
          require authorityAddress
          require ext_code.size(authorityAddress)
          call authorityAddress.canCall(address src, address dst, bytes4 sig) with:
               gas gas_remaining - 710 wei
              args caller, addr(this.address), call.func_hash
          require ext_call.success
          require ext_call.return_data[0]
  authorityAddress = _authority_
  log LogSetAuthority(address authority=_authority_)

def flow(): # not payable
  log call.func_hash: call.value, Array(len=calldata.size, data=call.data1, _param2
  require ext_code.size(tubAddress)
  call tubAddress.off() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  require ext_call.return_data[0]
  require ext_code.size(tubAddress)
  call tubAddress.din() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  if ext_call.return_data[0]:
      require block.timestamp > caged + cooldown
  else:
      require ext_code.size(tapAddress)
      call tapAddress.fog() with:
           gas gas_remaining - 710 wei
      require ext_call.success
      if ext_call.return_data[0]:
          require block.timestamp > caged + cooldown
  require ext_code.size(tubAddress)
  call tubAddress.flow() with:
       gas gas_remaining - 710 wei
  require ext_call.success

def cage(): # not payable
  log call.func_hash: call.value, Array(len=calldata.size, data=call.data1, _param2
  if this.address != caller:
      if owner != caller:
          require authorityAddress
          require ext_code.size(authorityAddress)
          call authorityAddress.canCall(address src, address dst, bytes4 sig) with:
               gas gas_remaining - 710 wei
              args caller, addr(this.address), call.func_hash
          require ext_call.success
          require ext_call.return_data[0]
  require ext_code.size(tubAddress)
  call tubAddress.pip() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  require ext_code.size(addr(ext_call.return_data))
  call addr(ext_call.return_data).read() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  require ext_code.size(voxAddress)
  call voxAddress.par() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  require 1000000000 * 10^18 * ext_call.return_data / 1000000000 * 10^18 == ext_call.return_data[0]
  require (1000000000 * 10^18 * ext_call.return_data / 2) >= 1000000000 * 10^18 * ext_call.return_data[0]
  require ext_call.return_data[0]
  require ext_code.size(tubAddress)
  call tubAddress.off() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  require not ext_call.return_data[0]
  require (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data[0]
  caged = block.timestamp
  require ext_code.size(tubAddress)
  call tubAddress.drip() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  require ext_code.size(tapAddress)
  call tapAddress.heal() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  require ext_code.size(voxAddress)
  call voxAddress.par() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  if not ext_call.return_data[0]:
      require ext_code.size(tubAddress)
      call tubAddress.per() with:
           gas gas_remaining - 710 wei
      require ext_call.success
      if ext_call.return_data[0]:
          require ext_call.return_data[0]
          require not 0 / ext_call.return_data[0]
      fit = 0
  else:
      require ext_call.return_data[0]
      require (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data * ext_call.return_data / ext_call.return_data == (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data[0]
      require ((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data * ext_call.return_data >= (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data * ext_call.return_data[0]
      require ext_code.size(tubAddress)
      call tubAddress.per() with:
           gas gas_remaining - 710 wei
      require ext_call.success
      if not ext_call.return_data[0]:
          fit = 0
      else:
          require ext_call.return_data[0]
          require ((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data * ext_call.return_data / 10^18 * ext_call.return_data / ext_call.return_data == ((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data * ext_call.return_data / 10^18
          require (((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data * ext_call.return_data / 10^18 * ext_call.return_data >= ((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data * ext_call.return_data / 10^18 * ext_call.return_data[0]
          fit = (((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data * ext_call.return_data / 10^18 * ext_call.return_data / 1000000000 * 10^18
  require ext_code.size(saiAddress)
  call saiAddress.totalSupply() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  require ((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data / 2) + 1000000000000000000000000000 * 10^18 >= 1000000000000000000000000000 * 10^18
  require (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data[0]
  if not ext_call.return_data[0]:
      fix = ((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data / 2) + 1000000000000000000000000000 * 10^18 / (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data[0]
  else:
      require ext_code.size(tubAddress)
      call tubAddress.pie() with:
           gas gas_remaining - 710 wei
      require ext_call.success
      require ext_code.size(saiAddress)
      call saiAddress.totalSupply() with:
           gas gas_remaining - 710 wei
      require ext_call.success
      require 1000000000 * 10^18 * ext_call.return_data / 1000000000 * 10^18 == ext_call.return_data[0]
      require (1000000000 * 10^18 * ext_call.return_data / 2) >= 1000000000 * 10^18 * ext_call.return_data[0]
      require ext_call.return_data[0]
      if ((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data / 2) + 1000000000000000000000000000 * 10^18 / (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data <= (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data[0]:
          fix = ((1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data / 2) + 1000000000000000000000000000 * 10^18 / (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data[0]
      else:
          fix = (1000000000 * 10^18 * ext_call.return_data / 2) / ext_call.return_data[0]
  require ext_code.size(saiAddress)
  call saiAddress.totalSupply() with:
       gas gas_remaining - 710 wei
  require ext_call.success
  if not ext_call.return_data[0]:
      require ext_code.size(tubAddress)
      call tubAddress.cage(uint256 fit_, uint256 jam) with:
           gas gas_remaining - 710 wei
          args fit, 0
  else:
      require ext_call.return_data[0]
      require fix * ext_call.return_data / ext_call.return_data == fix
      require (fix * ext_call.return_data >= fix * ext_call.return_data[0]
      require ext_code.size(tubAddress)
      call tubAddress.cage(uint256 fit_, uint256 jam) with:
           gas gas_remaining - 710 wei
          args fit, (fix * ext_call.return_data / 1000000000 * 10^18
  require ext_call.success
  require ext_code.size(tapAddress)
  call tapAddress.cage(uint256 fix_) with:
       gas gas_remaining - 710 wei
      args fix
  require ext_call.success
  require ext_code.size(tapAddress)
  call tapAddress.vent() with:
       gas gas_remaining - 710 wei
  require ext_call.success

